<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.5/uma.ecore"
    xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.0" xmi:id="-AJdYC7MRzyoNDx0DJmpBTw"
    name=",_QXm_gMdyEd2wA9_TUU3fKA" guid="-AJdYC7MRzyoNDx0DJmpBTw" changeDate="2009-03-10T16:58:06.812+0900">
  <mainDescription>&lt;p>&#xD;
    &lt;font face=&quot;굴림&quot;>[&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../SDSEng_MethodContent_Core/tasks/%CEF4%D3EC%B10C%D2B8%B2E4%C774%C5B4%ADF8%B7A8%20%C791%C131_43957E41.html&quot;&#xD;
    guid=&quot;_3X4ZMJxIEd2b9o00yINnSg&quot;>컴포넌트다이어그램 작성&lt;/a>]&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font face=&quot;굴림&quot;>수행 가이드(Task Guideline)&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>컴포넌트는 인터페이스를 통해서만 자신이 제공하는 서비스들을 공개하기 때문에 컴포넌트의 서비스를 이용하기 위해서는 해당 컴포넌트의 인터페이스를 통해서만 접근 가능하다. 즉 컴포넌트&#xD;
        인터페이스는 반드시 정의해야 한다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>컴포넌트 인터페이스는 정의된 컴포넌트에서 제공할 서비스들을 묶는 오퍼레이션들만을 포함하는 클래스이다. 인터페이스는 직접 구현되지 않는 타입(Type) 클래스이다. 따라서 개발 시&#xD;
        정의만 될 뿐 내부 오퍼레이션이 구현되지는 않는다. 인터페이스를 구현하는(Implementation) 클래스는 컴포넌트 내부에 클래스(일반적으로 Proxy 클래스)로 정의한다. 따라서 인터페이스는 컴포넌트&#xD;
        외부에 독립적으로 정의하고 인터페이스를 실제로 구현하는 클래스는 컴포넌트 내부에 정의한다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>컴포넌트와 인터페이스의 관계는 일반적으로 일대일 관계이다. 하나의 인터페이스는 한 개의 컴포넌트에서 구현되므로 하나의 컴포넌트에서 제공할 서비스를 한 개의 해당 인터페이스에&#xD;
        정의한다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>실제 구현되는 내용은 다르나 같은 의미의 서비스를 하는 컴포넌트들의 경우 여러 개의 컴포넌트가 한 개의 동일한 인터페이스를 구현 할 수도 있다. 이 경우 같은 의미의 서비스를&#xD;
        인터페이스로 이 서비스를 구현하는 컴포넌트를 각각 정의한다. 예로 DBMS 제품 별 데이터베이스의 성능 정보를 가져오는 컴포넌트들을 들 수 있는데 성능정보를 가져오는 서비스는 동일하나 DBMS 제품 별로&#xD;
        구현 내용은 다를 수 있다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>반대로 두 개 이상의 서로 다른 인터페이스를 한 개의 컴포넌트가 구현 할 수도 있다. 버전이 다른 인터페이스를 같은 컴포넌트에서 지원할 때나 이미 정의된 여러 인터페이스를 하나의&#xD;
        컴포넌트로 구현할 때 발생할 수 있다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>컴포넌트 간의 상호의존 관계는 컴포넌트의 결합도(Coupling)를 급격히 높이기 때문에 단방향으로 정제해야 한다. 또한 불필요한 의존관계는 시스템의 결합도(Coupling)를&#xD;
        높이고 컴포넌트의 재사용을 저해시키기 때문에 컴포넌트 간의 의존관계는 최소화해야 한다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>초기 설계클래스들은 분석모델로부터 식별되어 모든 기능 요구사항들이 설계클래스들에 할당 될 수 있도록 한다. 분석클래스들은 분석클래스의 스테레오 타입에 의존하는 플랫폼 특화된&#xD;
        패턴들을 사용하여 설계클래스들로 바로 변환된다. 일반적으로 Boundary 클래스들은 일반적으로 복수의 Action 클래스들과 JSP들로 변환되고, 컴포넌트 클래스들은 비즈니스 로직을 담고 있는 하나 또는&#xD;
        그 이상의 EJB, Servlet 또는 POJO(Plain Old Java Object) 클래스들로 변환된다. Entity 클래스들은 하나 또는 그 이상의 DAO, DTO 그리고 Manager 클래스들로&#xD;
        변환된다. 그러나 이는 어디까지나 예제일 뿐이며 해당 프로젝트에서 결정된 소프트웨어 아키텍처 설계 전략에 따라 변환하도록 한다. 이렇게 도출된 설계클래스는 각 컴포넌트 단위로 클래스다이어그램(설계)를&#xD;
        작성한다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>설계클래스의 오퍼레이션들은 분석클래스들의 책임(Responsibility)으로부터 추출된다. 분석클래스들의 책임은 설계 작업 동안 설계클래스의 비즈니스 오퍼레이션으로 변환되는 데&#xD;
        이 때 비즈니스 오퍼레이션은 오퍼레이션의 일부분들이 서브 클래스에 의해 오버라이딩(Overriding) 될 때 또는 오퍼레이션의 일부분이 분리되어 별도로 단위 테스트 되어야 할 때 분할될 수도 있다.&#xD;
        설계클래스들은 또한 클래스의 상태를 세팅하거나 관리하거나 조회하는 등의 목적을 가진 지원성 오퍼레이션들이 추가된다. 예를 들어 constructor, setter/getter, comparison,&#xD;
        assignment 및 serialization 등이다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>설계클래스에 필요한 속성들은 분석 모델에 정의되어 있는 속성들을 고려하거나 클래스 오퍼레이션을 수행하는 데에 필요한 정보를 검토하여 식별한다. 또한 오퍼레이션 매개변수로 전달되지&#xD;
        않는 정보는 속성일 가능성이 있다. 그리고 분석 모델에서 각 클래스의 관계(Relationship)를 살펴보는 것이 좋다. 어떤 클래스가 다른 클래스의 참조자(Reference)를 관리할 필요가 있을 경우&#xD;
        이러한 참조자들이 해당 클래스의 속성이 된다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>연관(Association) 또는 의존(Dependency)관계들은 분석단계에서 그리 명확하게 구분하여 사용하지 않지만 설계단계에서는 의존(Dependency),&#xD;
        연관(Association), 또는 복합(Composition/Aggregation) 중 하나로 대체해야 한다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>하나의 클래스가 오퍼레이션을 수행하기 위해 어떤 정보가 필요할 경우나 하나의 오퍼레이션에서 다른 클래스로 정보를 전달할 경우 해당 클래스가 이러한 정보들을 오퍼레이션 매개변수의&#xD;
        형태 또는 지역변수, 속성 등의 형태로 이미 갖고 있다고 보장해야 한다. 만일 이러한 정보를 가지고 있지 않을 경우 해당 클래스로부터 해당 정보를 가져와야 한다. 이러한 상황이 다른 클래스로부터 해당 정보를&#xD;
        획득해야 하는 클래스에 대해서 클래스 간 관계(Relationship)을 고려해봐야 할 포인트이다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>입력물로 사용되는 ERD(물리)의 경우는 클래스다이어그램(설계)과 병행작업 되면서 완성된다.&lt;/font>&#xD;
    &lt;/li>&#xD;
&lt;/ol></mainDescription>
  <sections xmi:id="_bBMiIvmrEd2JRcy3PiAHxw" name="설계자는 각 컴포넌트의 컴포넌트 인터페이스를 정의한다."
      guid="_bBMiIvmrEd2JRcy3PiAHxw"/>
  <sections xmi:id="_bBMiIfmrEd2JRcy3PiAHxw" name="설계자는 각 컴포넌트 인터페이스가 갖는 오퍼레이션을 식별한다."
      guid="_bBMiIfmrEd2JRcy3PiAHxw"/>
  <sections xmi:id="_bBMiJvmrEd2JRcy3PiAHxw" name="설계자는 컴포넌트와 인터페이스 간의 관계(Realize)를 정의한다."
      guid="_bBMiJvmrEd2JRcy3PiAHxw"/>
  <sections xmi:id="_bBMiJPmrEd2JRcy3PiAHxw" name="설계자는 컴포넌트 간의 의존도(Dependency)를 정의하여 컴포넌트아키텍처다이어그램을 작성한다."
      guid="_bBMiJPmrEd2JRcy3PiAHxw"/>
  <sections xmi:id="_bBMiJfmrEd2JRcy3PiAHxw" name="설계자는 소프트웨어 아키텍처에 따라 각 컴포넌트 내부를 구성할 후보 설계클래스를 식별한다."
      guid="_bBMiJfmrEd2JRcy3PiAHxw"/>
  <sections xmi:id="_bBMiI_mrEd2JRcy3PiAHxw" name="설계자는 클래스의 속성, 오퍼레이션 및 관계를 정의하여 클래스다이어그램(설계)를 작성한다."
      guid="_bBMiI_mrEd2JRcy3PiAHxw"/>
  <sections xmi:id="_DtW5oASrEd6u1pdhw4SOFA" name="설계자는 처리로직을 설계클래스 간의 상호작용을 정의하여 시퀀스다이어그램(설계)를 작성한다.(선택)"
      guid="_DtW5oASrEd6u1pdhw4SOFA"/>
  <sections xmi:id="_FvJLMASrEd6u1pdhw4SOFA" name="설계자는 컴포넌트명세서를 작성한다." guid="_FvJLMASrEd6u1pdhw4SOFA"/>
  <purpose>&lt;span&#xD;
style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: 굴림; mso-bidi-font-size: 12.0pt; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: KO; mso-bidi-language: AR-SA&quot;>분석모델과&#xD;
소프트웨어 아키텍처를 바탕으로 구현환경&lt;span lang=&quot;EN-US&quot;>(&lt;/span>플랫폼&lt;span lang=&quot;EN-US&quot;>)&lt;/span>에 맞게 컴포넌트를 구성하는 설계클래스를 도출하고&lt;span&#xD;
lang=&quot;EN-US&quot;>,&lt;/span> 클래스의 속성 및 클래스 간의 정적인&lt;span lang=&quot;EN-US&quot;>(Static)&lt;/span> 관계를 정의한다&lt;span lang=&quot;EN-US&quot;>.&lt;/span> 또한 도출된&#xD;
설계클래스 인스턴스&lt;span lang=&quot;EN-US&quot;>(&lt;/span>객체&lt;span lang=&quot;EN-US&quot;>)&lt;/span> 간의 호출관계를 분석하여 동적인&lt;span lang=&quot;EN-US&quot;>(Dynamic)&lt;/span> 관계를&#xD;
정의한다&lt;span lang=&quot;EN-US&quot;>.&lt;/span>&lt;/span></purpose>
</org.eclipse.epf.uma:TaskDescription>
