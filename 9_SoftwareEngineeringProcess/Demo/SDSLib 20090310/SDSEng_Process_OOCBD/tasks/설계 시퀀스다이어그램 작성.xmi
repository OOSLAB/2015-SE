<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.5/uma.ecore"
    xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.0" xmi:id="-Wta7U4DQ6sVMglcrXlJdUA"
    name="설계 시퀀스다이어그램 작성,_-Wgv0MIGEd2yCI00VhFopQ" guid="-Wta7U4DQ6sVMglcrXlJdUA" changeDate="2009-03-10T16:55:57.609+0900">
  <mainDescription>&lt;p>&#xD;
    &lt;font face=&quot;굴림&quot;>[&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../SDSEng_MethodContent_Core/tasks/%C2DC%D000%C2A4%B2E4%C774%C5B4%ADF8%B7A8%20%C791%C131_2377D5AA.html&quot;&#xD;
    guid=&quot;_-_anwJxHEd2b9o00yINnSg&quot;>시퀀스다이어그램 작성&lt;/a>]&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font face=&quot;굴림&quot;>수행 가이드(Task Guideline)&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>초기 설계클래스들은 분석모델로부터 식별되어 모든 기능 요구사항들이 설계클래스들에 할당 될 수 있도록 한다. 분석클래스들은 분석클래스의 스테레오 타입에 의존하는 플랫폼 특화된&#xD;
        패턴들을 사용하여 설계클래스들로 바로 변환된다. 일반적으로 Boundary 클래스들은 일반적으로 복수의 Action 클래스들과 JSP들로 변환되고, Control 클래스들은 비즈니스 로직을 담고 있는 하나&#xD;
        또는 그 이상의 EJB, Servlet 또는 POJO(Plain Old Java Object) 클래스들로 변환된다. Entity 클래스들은 하나 또는 그 이상의 DAO, DTO 그리고 Manager&#xD;
        클래스들로 변환된다. 그러나 이것은 예제일 뿐이며 해당 프로젝트에서 결정된 소프트웨어 아키텍처 설계 전략에 따라 변환하도록 한다. 이렇게 도출된 설계클래스는 각 레이어별 분석패키지 단위로&#xD;
        클래스다이어그램(설계)를 작성한다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>설계클래스의 오퍼레이션들은 분석클래스들의 책임(Responsibility)으로부터 추출된다. 분석클래스들의 책임은 설계 작업 동안 설계클래스의 비즈니스 오퍼레이션으로 변환되는&#xD;
        데, 이 때 비즈니스 오퍼레이션은 오퍼레이션의 일부분들이 서브 클래스에 의해 오버라이딩(Overriding) 될 때 또는 오퍼레이션의 일부분이 분리되어 별도로 단위 테스트 되어야 할 때 분할될 수도 있다.&#xD;
        설계클래스들은 또한 클래스의 상태를 세팅하거나 관리하거나 조회하는 등의 목적을 가진 지원성 오퍼레이션들이 추가된다. 예를 들어 constructor, setter/getter, comparison,&#xD;
        assignment 및 serialization 등이다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>설계클래스에 필요한 속성들은 분석모델에 정의되어 있는 속성들을 고려하거나, 클래스 오퍼레이션을 수행하는 데에 필요한 정보를 검토하여 식별한다. 또한 오퍼레이션 매개변수로 전달되지&#xD;
        않는 정보는 속성일 가능성이 있다. 그리고 분석모델에서 각 클래스의 관계(Relationship)를 살펴보는 것이 좋다. 어떤 클래스가 다른 클래스의 참조자(Reference)를 관리할 필요가 있을 경우&#xD;
        이러한 참조자들이 해당 클래스의 속성이 된다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>연관(Association) 또는 의존(Dependency)관계들은 분석단계에서 그리 명확하게 구분하여 사용하지 않지만, 설계단계에서는 의존(Dependency),&#xD;
        연관(Association), 또는 복합(Composition/Aggregation) 중 하나로 대체해야 한다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>하나의 클래스가 오퍼레이션을 수행하기 위해 어떤 정보가 필요할 경우나 하나의 오퍼레이션에서 다른 클래스로 정보를 전달할 경우, 해당 클래스가 이러한 정보들을 오퍼레이션 매개변수의&#xD;
        형태 또는 지역변수, 속성 등의 형태로 이미 갖고 있다고 보장해야 한다. 만일 이러한 정보를 가지고 있지 않을 경우, 해당 클래스로부터 해당 정보를 가져와야 한다. 이러한 상황이 다른 클래스로부터 해당&#xD;
        정보를 획득해야 하는 클래스에 대해서 클래스 간 관계(Relationship)을 고려해봐야 할 포인트이다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>입력물로 사용되는 ERD(물리)의 경우는 클래스다이어그램(설계)과 병행작업 되면서 완성된다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>소프트웨어 아키텍처를 참조하여 배치기능을 처리하기 위한 개발유형을 정의하고 배치 프로그램의 상세 처리 로직을 기술한다.&lt;/font> &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;font face=&quot;굴림&quot;>배치 기능의 특성 및 성격을 파악하고 소프트웨어 아키텍처에 기반하여 개발유형을 정의한다.&lt;/font>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;font face=&quot;굴림&quot;>배치 기능의 처리로직이 복잡한 경우나 여러 배치 기능에서 공통된 처리로직이 있는 경우, 하나의 프로그램으로 배치처리 로직이 완성되기 보다는 여러 프로그램을 사용하여&#xD;
                처리할 수 있다. 또한 배치 처리에 필요한 처리 로직이 OLTP성 업무의 처리 로직과 동일한 경우, 해당 온라인컴포넌트를 그대로 이용할 수 있다.&lt;/font>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;font face=&quot;굴림&quot;>배치를 처리하기 위해 필요한 데이터나 처리 후 생성되는 데이터는 파일형태(SAM, Text, XML 등) 혹은 테이블형태로 저장하여 이용할 수 있다. 일반적으로&#xD;
                파일형태인 경우는 데이터 건수가 많거나 해당 시스템에 데이터가 존재하지 않는 경우 주로 이용하고, 테이블형태를 이용하는 경우는 데이터 건수가 작거나 여러 데이터가 연관된 경우&#xD;
                이용한다.&lt;/font>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;font face=&quot;굴림&quot;>처리로직은 프로그램 구현이 가능한 수준으로 작성한다.&lt;/font>&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font face=&quot;굴림&quot;>배치 기능은 대부분 대용량의 데이터를 다루고 스케줄링에 의해 동작하므로 작업 기준을 명확히 정의해야 한다.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;font face=&quot;굴림&quot;>배치 기능 간 상호 연관성이 있는 경우에는 배치 작업을 수행하기 위한 선후행 작업을 명확히 정의한다.&lt;/font>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;font face=&quot;굴림&quot;>작업 주기 및 작업 일시는 배치기능의 업무 특성 및 데이터량, 선후행작업을 고려하여 정의한다.&lt;/font>&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ol></mainDescription>
  <sections xmi:id="_bBMiMfmrEd2JRcy3PiAHxw" name="설계자는 소프트웨어 아키텍처에 따라 후보 설계클래스를 식별한다."
      guid="_bBMiMfmrEd2JRcy3PiAHxw"/>
  <sections xmi:id="_RUmA0ASqEd6u1pdhw4SOFA" name="설계자는 클래스의 속성 및 관계를 정의하여 클래스다이어그램(설계)를 작성한다."
      guid="_RUmA0ASqEd6u1pdhw4SOFA"/>
  <sections xmi:id="_SM6v8ASqEd6u1pdhw4SOFA" name="설계자는 처리로직을 설계클래스 간의 상호작용을 정의하여 시퀀스다이어그램(설계)를 작성한다.(선택)"
      guid="_SM6v8ASqEd6u1pdhw4SOFA"/>
  <sections xmi:id="_ZD514ASqEd6u1pdhw4SOFA" name="설계자는 각 클래스별 클래스명세서를 작성한다." guid="_ZD514ASqEd6u1pdhw4SOFA"/>
  <sections xmi:id="_nk_gwASqEd6u1pdhw4SOFA" name="설계자는 소프트웨어 아키텍처에 따라 배치 특성을 고려하여 개발유형을 정의하고 프로그램의 상세 처리로직을 정의한다. 또한 배치 기능을 실행하기 위해 필요한 작업기준(작업주기, 작업일시, 선후행작업)을 정의한다.(선택)"
      guid="_nk_gwASqEd6u1pdhw4SOFA"/>
  <purpose>분석모델과 소프트웨어 아키텍처를 바탕으로 구현환경(플랫폼)에 맞게 설계클래스를 도출하고, 클래스의 속성 및 클래스 간의 정적인(Static) 관계와 설계클래스 인스턴스(객체) 간의 호출관계를 분석하여&#xD;
동적인(Dynamic) 관계를 정의한다. 또한 정의된 각 클래스가 갖는 속성(Attribute), 오퍼레이션(Operation) 및 오퍼레이션의 세부로직 등에 대한 클래스명세서를 작성하고 배치기능을 처리하기 위한&#xD;
프로그램명세서를 작성한다.</purpose>
</org.eclipse.epf.uma:TaskDescription>
